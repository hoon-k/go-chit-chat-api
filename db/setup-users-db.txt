CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE TYPE roles AS ENUM ('member', 'admin', 'moderator');

-- Create users table.
CREATE TABLE users
(
    uuid uuid NOT NULL DEFAULT uuid_generate_v4(),
    first_name character varying(255) NOT NULL,
    last_name character varying(255) NOT NULL,
    created_date timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT users_pkey PRIMARY KEY (uuid)
);

-- Create account table.
CREATE TABLE accounts
(
    username character varying(255) NOT NULL,
    password character varying(255) NOT NULL,
    uuid uuid NOT NULL DEFAULT uuid_generate_v4(),
    active boolean NOT NULL DEFAULT true,
    role roles NOT NULL DEFAULT 'member'::roles,
    user_id uuid NOT NULL,
    created_date timestamp with time zone NOT NULL DEFAULT now(),
    CONSTRAINT accounts_pkey PRIMARY KEY (uuid),
    CONSTRAINT accounts_fkey FOREIGN KEY (user_id)
        REFERENCES users (uuid) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);

CREATE OR REPLACE FUNCTION create_user(un character varying, pw character varying, fn character varying, ln character varying, rl roles default 'member')
RETURNS TABLE (first_name character varying, last_name character varying, username character varying, role roles)
AS $BODY$
    WITH user_insert AS (
        INSERT 
        INTO users (first_name, last_name)
        VALUES (fn, ln)
        RETURNING uuid, first_name, last_name
    )

    INSERT
    INTO accounts (
        username,
        password,
        role,
        user_id)
    VALUES (
        un,
        crypt(pw, gen_salt('bf', 8)),
        rl,
        (SELECT uuid FROM user_insert)
    )
	RETURNING
		(SELECT first_name FROM user_insert),
		(SELECT last_name FROM user_insert),
		username,
		role;
$BODY$
LANGUAGE sql;

CREATE OR REPLACE PROCEDURE delete_user(uid uuid)
LANGUAGE 'sql'
AS $BODY$
	DELETE FROM accounts where user_id = uid;
    DELETE FROM users where uuid = uid;
$BODY$;

-- Create function to authenticate a member
CREATE OR REPLACE FUNCTION authenticate_user(un character varying, pw character varying)
RETURNS TABLE (user_id uuid, role roles)
AS $BODY$
    SELECT user_id, role 
    FROM accounts 
    WHERE username = un AND password = crypt(pw, password); 
$BODY$
LANGUAGE sql;

-- Create initial admin user.
SELECT * FROM create_user('admin', 'admin', 'Admin', 'Admin', 'admin');